Começamos com `ssh -p 2220 bandit0@bandit.labs.overthewire.org`
Senha: bandit0

*0*

`ls -a
cat readme
`
>> boJ9jbbUNNfktd78OOpsqOltutMc3MY1

*1*

`ls -a
cd -
cd '-'
cd './-'
ls -la
file ./-
cat ./-
`

>> CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9

*2*

`ls -al
cat s<TAB>
`

>> UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK

*3*

`ls -la
cd i<TAB>
ls -a
cat .h<TAB>
`

>> pIwrPrtPN36QITSp3EQaw936yaFoFgAB

*4*

`ls -a
cd i<TAB>
ls -a
file ./-file00
file ./-file01
file ./-file02
file ./-file03
file ./-file03
file ./-file04
file ./-file04
file ./-file05
file ./-file06
file ./-file07
cat ./-file07
`

>> koReBOKuIDDepwhWk7jZC0RTdopnAYKh

*5*

`ls -a
cd i<TAB>
ls -a
`

Ah, 5 mil pastas....

`ls -Rla | grep 1033
`

O nome é '.file2'

`find .file2
find -k -f .file2
`
(Li o manual do file cof cof)

`find . | grep .file2
`

Por que apareceu isso tudo? Ah, em regex '.' é quase qualquer coisa.

`find . | grep '/[.]file2$'
`

Claro, todas as pastas tem um '.file2'...
(Voltando para o manual)

`find . -n 1033
` (Erros de CTRL-C CTRL-V)
`find . -size 1033
` (Por algum motivo não achou nada)
`find . -size -1040c
find . -size -1040c | grep '/.file2$'
find . -size -1040c | grep '/[.]file2$'
`

Agora testamos qual tem o ramanho que eu quero.

`ls -l maybehere15/.file2
ls -l maybehere10/.file2
ls -l maybehere08/.file2
ls -l maybehere07/.file2
cat maybehere07/.file2
`

>> DXjZPULLxYr17uwoI01bNLQbtFemEgo7

*6*

`ls -Rla / | grep 33
`

Printou muita coisa e sem querer eu achei o arquivo (está no bandit6-.png) mas
vou considerar que não achei. Obs: me recuso a tirar print da saída inteira.

`ls -Rla / | grep "bandit7 bandit6"
find / | grep bandit7.password
cat /var/lib/dpkg/info/bandit7.password
`

>> HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs

*7*

`ls -a
cat data.txt | less
/millionth
`

Quando eu olhei para a linha percebi que poderia ter economizado um print com
'grep millionth' no lugar de less

`q`

>> cvX2JJa4CFALtqS87jk27qwqGhBM9plV

*8*

`ls -a
cata data.txt | sort | uniq -u
`

>> UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR

*9*

`ls -a
strings data.txt | grep '='
`

>> truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk

*10*

`ls -a
base64 -d data.txt
`

>> IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR

*11*

`ls -a
cat data.txt | tr 'A-Za-z' 'N-ZA-Mn-za-m'
`

Obrigado wiki, ter que digitar o comando da cabeça teria demorado um tempo.
(https://en.wikipedia.org/wiki/ROT13)

>> 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu

*12*

`ls -a
mkdir /tmp/shikiyo
xxd -r data.txt >> /tmp/shikiyo/file1
`

Vamos ver como descompacta.

`file /tmp/shikiyo/file1
`

É um gzip.

`cd /tmp/shikiyo/
gzip -d file1 >> data2.bin
`
Deu ruim. Demorou alguns comandos para perceber o que eu tinha que fazer.

`ls
file data2.bin
rm data2.bin
mv file1 data1.gz
gzip -d data1.gz >> data2.bin
file data2.bin
ls
ls -a
file data1
rm data2.bin
`

No final das contas eu só precisava de `gzip -d data1.gz`.
Agora pelo bzip2

`bzip2 -d data1
file data1.out
`

Outro gzip.

` mv data1.out data.gz
gzip -d data.gz
file data
`

Agora é um tar.

`tar -xf data
ls
file data5.bin
`

Outro tar.

`tar -xf data5.bin
ls
file data6.bin
bzip2 -d data6.bin
file data6.bin.out
tar -xf data6.bin.out
ls
`

Então eu tive que fazer uma pausa (mas já estava tudo salvo na tmp, então tudo
ok). Quando voltei:

`cd /tmp/shikiyo/
ls -a
file data8.bin
mv data8.bin data.gz
gzip -d data.gz
y
ls file data
cat data
`

Já temos a chave, mas é bom limpar o espaço que foi usado.

`cd ..
rm -r shikiyo
cd shikiyo
`

(O último foi só para ter certeza que foi apagado.)

>> 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL

Tentei fazer alguma coisa, mas não deu muito certo. Vou pesquisar mais e se
surgir alguma ideia vou mudar esse texto. De qualquer forma os prints vão
ficar.
